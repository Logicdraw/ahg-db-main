"""empty message

Revision ID: 32bf163d6e95
Revises: 
Create Date: 2021-07-01 12:09:58.088560

"""
from alembic import op
import sqlalchemy as sa
import main.utils
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '32bf163d6e95'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('camps',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('forms',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slug', sa.String(), nullable=True),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('has_deadline', sa.Boolean(), server_default='0', nullable=True),
    sa.Column('deadline_on', main.utils.sqlalchemy.AwareDateTime(), nullable=True),
    sa.Column('is_live', sa.Boolean(), server_default='0', nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_forms_id'), 'forms', ['id'], unique=False)
    op.create_index(op.f('ix_forms_slug'), 'forms', ['slug'], unique=True)
    op.create_index(op.f('ix_forms_title'), 'forms', ['title'], unique=False)
    op.create_table('gs_meta',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('access_token_encoded', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_gs_meta_id'), 'gs_meta', ['id'], unique=False)
    op.create_table('players',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('medicare_number', sa.String(), nullable=True),
    sa.Column('street_address_1', sa.String(), nullable=True),
    sa.Column('street_address_2', sa.String(), nullable=True),
    sa.Column('postal_code', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('province', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('gender', sa.String(), nullable=True),
    sa.Column('language', sa.String(), nullable=True),
    sa.Column('spng_persona_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('spng_persona_id')
    )
    op.create_index(op.f('ix_players_date_of_birth'), 'players', ['date_of_birth'], unique=False)
    op.create_index(op.f('ix_players_first_name'), 'players', ['first_name'], unique=False)
    op.create_index(op.f('ix_players_last_name'), 'players', ['last_name'], unique=False)
    op.create_table('programs',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('resource_categories',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('is_live', sa.Boolean(), server_default='1', nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('slug', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('seasons',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_seasons_id'), 'seasons', ['id'], unique=False)
    op.create_index(op.f('ix_seasons_name'), 'seasons', ['name'], unique=False)
    op.create_table('spng_meta',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('access_token_encoded', sa.String(), nullable=True),
    sa.Column('refresh_token_encoded', sa.String(), nullable=True),
    sa.Column('last_fetched_registrations', main.utils.sqlalchemy.AwareDateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_spng_meta_id'), 'spng_meta', ['id'], unique=False)
    op.create_table('spng_survey_questions',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('use_answer_text_mappings', sa.Boolean(), nullable=True),
    sa.Column('exclude_non_set_answer_text_mapping_keys', sa.Boolean(), server_default='0', nullable=True),
    sa.Column('shared_question_ids', postgresql.ARRAY(sa.Integer()), nullable=True),
    sa.Column('answer_text_mappings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_spng_survey_questions_id'), 'spng_survey_questions', ['id'], unique=False)
    op.create_table('spng_surveys',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('survey_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='1', nullable=True),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_spng_surveys_id'), 'spng_surveys', ['id'], unique=False)
    op.create_index(op.f('ix_spng_surveys_name'), 'spng_surveys', ['name'], unique=False)
    op.create_index(op.f('ix_spng_surveys_survey_id'), 'spng_surveys', ['survey_id'], unique=False)
    op.create_table('users',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default='1', nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_name'), 'users', ['name'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_table('adult_reps',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_adult_reps_full_name'), 'adult_reps', ['full_name'], unique=False)
    op.create_table('camp_groups',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('camp_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['camp_id'], ['camps.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('camp_instances',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('camp_id', sa.Integer(), nullable=True),
    sa.Column('year_start', sa.Integer(), nullable=True),
    sa.Column('year_end', sa.Integer(), nullable=True),
    sa.Column('spng_name_snake', sa.String(), nullable=True),
    sa.Column('spng_shared_question_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['camp_id'], ['camps.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_camp_instances_spng_name_snake'), 'camp_instances', ['spng_name_snake'], unique=False)
    op.create_index(op.f('ix_camp_instances_spng_shared_question_id'), 'camp_instances', ['spng_shared_question_id'], unique=False)
    op.create_table('coaches',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_coaches_full_name'), 'coaches', ['full_name'], unique=False)
    op.create_table('form_entries',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slug', sa.String(), nullable=True),
    sa.Column('form_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['form_id'], ['forms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_entries_id'), 'form_entries', ['id'], unique=False)
    op.create_index(op.f('ix_form_entries_slug'), 'form_entries', ['slug'], unique=True)
    op.create_table('form_question_checkboxes',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('label', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='1', nullable=True),
    sa.Column('form_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['form_id'], ['forms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_question_checkboxes_id'), 'form_question_checkboxes', ['id'], unique=False)
    op.create_table('form_question_inputs',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('label', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='1', nullable=True),
    sa.Column('form_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['form_id'], ['forms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_question_inputs_id'), 'form_question_inputs', ['id'], unique=False)
    op.create_table('form_question_radios',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('label', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='1', nullable=True),
    sa.Column('radio_answers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('form_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['form_id'], ['forms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_question_radios_id'), 'form_question_radios', ['id'], unique=False)
    op.create_table('form_question_selects',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('label', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='1', nullable=True),
    sa.Column('select_is_multiple', sa.Boolean(), server_default='0', nullable=True),
    sa.Column('select_answers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('form_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['form_id'], ['forms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_question_selects_id'), 'form_question_selects', ['id'], unique=False)
    op.create_table('form_question_textareas',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('label', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='1', nullable=True),
    sa.Column('form_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['form_id'], ['forms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_question_textareas_id'), 'form_question_textareas', ['id'], unique=False)
    op.create_table('guardians',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('mobile_phone', sa.String(), nullable=True),
    sa.Column('home_phone', sa.String(), nullable=True),
    sa.Column('work_phone', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_guardians_full_name'), 'guardians', ['full_name'], unique=False)
    op.create_table('leagues',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('season_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['season_id'], ['seasons.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_leagues_id'), 'leagues', ['id'], unique=False)
    op.create_index(op.f('ix_leagues_name'), 'leagues', ['name'], unique=False)
    op.create_table('program_groups',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('program_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['program_id'], ['programs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('program_instances',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('program_id', sa.Integer(), nullable=True),
    sa.Column('year_start', sa.Integer(), nullable=True),
    sa.Column('year_end', sa.Integer(), nullable=True),
    sa.Column('spng_name_snake', sa.String(), nullable=True),
    sa.Column('spng_shared_question_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['program_id'], ['programs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_program_instances_spng_name_snake'), 'program_instances', ['spng_name_snake'], unique=False)
    op.create_index(op.f('ix_program_instances_spng_shared_question_id'), 'program_instances', ['spng_shared_question_id'], unique=False)
    op.create_table('resources',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('is_live', sa.Boolean(), server_default='1', nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('slug', sa.String(), nullable=True),
    sa.Column('thumbnail_image_url', sa.String(), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('resource_category_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['resource_category_id'], ['resource_categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_resources_id'), 'resources', ['id'], unique=False)
    op.create_table('season_instances',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('year_start', sa.Integer(), nullable=True),
    sa.Column('year_end', sa.Integer(), nullable=True),
    sa.Column('season_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['season_id'], ['seasons.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spng_survey_camps',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['spng_surveys.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spng_survey_programs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['spng_surveys.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spng_survey_question_table_maps',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('db_table_name', sa.String(), nullable=False),
    sa.Column('db_table_column_name', sa.String(), nullable=False),
    sa.Column('spng_survey_question_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['spng_survey_question_id'], ['spng_survey_questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_spng_survey_question_table_maps_db_table_column_name'), 'spng_survey_question_table_maps', ['db_table_column_name'], unique=False)
    op.create_index(op.f('ix_spng_survey_question_table_maps_db_table_name'), 'spng_survey_question_table_maps', ['db_table_name'], unique=False)
    op.create_index(op.f('ix_spng_survey_question_table_maps_id'), 'spng_survey_question_table_maps', ['id'], unique=False)
    op.create_table('spng_survey_teams',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['spng_surveys.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spng_surveys_spng_survey_questions',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('spng_survey_id', sa.Integer(), nullable=False),
    sa.Column('spng_survey_question_id', sa.Integer(), nullable=False),
    sa.Column('included_in_db', sa.Boolean(), server_default='1', nullable=True),
    sa.ForeignKeyConstraint(['spng_survey_id'], ['spng_surveys.id'], ),
    sa.ForeignKeyConstraint(['spng_survey_question_id'], ['spng_survey_questions.id'], ),
    sa.PrimaryKeyConstraint('spng_survey_id', 'spng_survey_question_id')
    )
    op.create_table('camp_group_instances',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('camp_instance_id', sa.Integer(), nullable=True),
    sa.Column('camp_group_id', sa.Integer(), nullable=True),
    sa.Column('year_start', sa.Integer(), nullable=True),
    sa.Column('year_end', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['camp_group_id'], ['camp_groups.id'], ),
    sa.ForeignKeyConstraint(['camp_instance_id'], ['camp_instances.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('camp_instances_coaches',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('camp_instance_id', sa.Integer(), nullable=False),
    sa.Column('coach_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['camp_instance_id'], ['camp_instances.id'], ),
    sa.ForeignKeyConstraint(['coach_id'], ['coaches.id'], ),
    sa.PrimaryKeyConstraint('camp_instance_id', 'coach_id')
    )
    op.create_table('conferences',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('season_id', sa.Integer(), nullable=True),
    sa.Column('league_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['leagues.id'], ),
    sa.ForeignKeyConstraint(['season_id'], ['seasons.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_conferences_name'), 'conferences', ['name'], unique=False)
    op.create_table('form_entry_answer_checkboxes',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('checkbox_checked', sa.Boolean(), server_default='0', nullable=True),
    sa.Column('form_question_checkbox_id', sa.Integer(), nullable=True),
    sa.Column('form_entry_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['form_entry_id'], ['form_entries.id'], ),
    sa.ForeignKeyConstraint(['form_question_checkbox_id'], ['form_question_checkboxes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_entry_answer_checkboxes_id'), 'form_entry_answer_checkboxes', ['id'], unique=False)
    op.create_table('form_entry_answer_inputs',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('input_answer', sa.String(), nullable=True),
    sa.Column('form_question_input_id', sa.Integer(), nullable=True),
    sa.Column('form_entry_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['form_entry_id'], ['form_entries.id'], ),
    sa.ForeignKeyConstraint(['form_question_input_id'], ['form_question_inputs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_entry_answer_inputs_id'), 'form_entry_answer_inputs', ['id'], unique=False)
    op.create_table('form_entry_answer_radios',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('radio_selected', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('form_question_radio_id', sa.Integer(), nullable=True),
    sa.Column('form_entry_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['form_entry_id'], ['form_entries.id'], ),
    sa.ForeignKeyConstraint(['form_question_radio_id'], ['form_question_radios.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_entry_answer_radios_id'), 'form_entry_answer_radios', ['id'], unique=False)
    op.create_table('form_entry_answer_selects',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('select_selected', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('form_question_select_id', sa.Integer(), nullable=True),
    sa.Column('form_entry_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['form_entry_id'], ['form_entries.id'], ),
    sa.ForeignKeyConstraint(['form_question_select_id'], ['form_question_selects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_entry_answer_selects_id'), 'form_entry_answer_selects', ['id'], unique=False)
    op.create_table('form_entry_answer_textareas',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('textarea_answer', sa.Text(), nullable=True),
    sa.Column('form_question_textarea_id', sa.Integer(), nullable=True),
    sa.Column('form_entry_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['form_entry_id'], ['form_entries.id'], ),
    sa.ForeignKeyConstraint(['form_question_textarea_id'], ['form_question_textareas.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_entry_answer_textareas_id'), 'form_entry_answer_textareas', ['id'], unique=False)
    op.create_table('guardians_players',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('guardian_id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), nullable=True),
    sa.Column('is_emergency_contact', sa.Boolean(), server_default='0', nullable=True),
    sa.ForeignKeyConstraint(['guardian_id'], ['guardians.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.PrimaryKeyConstraint('guardian_id', 'player_id')
    )
    op.create_table('league_instances',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('year_start', sa.Integer(), nullable=True),
    sa.Column('year_end', sa.Integer(), nullable=True),
    sa.Column('league_id', sa.Integer(), nullable=True),
    sa.Column('season_instance_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['leagues.id'], ),
    sa.ForeignKeyConstraint(['season_instance_id'], ['season_instances.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('program_group_instances',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('program_instance_id', sa.Integer(), nullable=True),
    sa.Column('program_group_id', sa.Integer(), nullable=True),
    sa.Column('year_start', sa.Integer(), nullable=True),
    sa.Column('year_end', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['program_group_id'], ['program_groups.id'], ),
    sa.ForeignKeyConstraint(['program_instance_id'], ['program_instances.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('program_instances_coaches',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('program_instance_id', sa.Integer(), nullable=False),
    sa.Column('coach_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['coach_id'], ['coaches.id'], ),
    sa.ForeignKeyConstraint(['program_instance_id'], ['program_instances.id'], ),
    sa.PrimaryKeyConstraint('program_instance_id', 'coach_id')
    )
    op.create_table('resource_articles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('article_body', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['resources.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('resource_pdfs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('pdf_url', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['resources.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('resource_videos',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('video_url', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['resources.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('camp_instance_registrations',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('placed_at_datetime', main.utils.sqlalchemy.AwareDateTime(), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('coaches_comment', sa.Text(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('spng_survey_id', sa.Integer(), nullable=True),
    sa.Column('spng_survey_result_id', sa.Integer(), nullable=True),
    sa.Column('spng_persona_id', sa.Integer(), nullable=True),
    sa.Column('spng_user_id', sa.Integer(), nullable=True),
    sa.Column('roster_player_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('completed', sa.Boolean(), nullable=True),
    sa.Column('registration_sport', sa.String(), nullable=True),
    sa.Column('registration_type', sa.String(), nullable=True),
    sa.Column('registrant_type', sa.String(), nullable=True),
    sa.Column('extra_question_answers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('gross', sa.Float(), nullable=True),
    sa.Column('net', sa.Float(), nullable=True),
    sa.Column('service_fee', sa.Float(), nullable=True),
    sa.Column('gross_forecast', sa.Float(), nullable=True),
    sa.Column('net_forecast', sa.Float(), nullable=True),
    sa.Column('service_fee_forecast', sa.Float(), nullable=True),
    sa.Column('gross_outstanding', sa.Float(), nullable=True),
    sa.Column('order_number', sa.String(), nullable=True),
    sa.Column('discounts', sa.Float(), nullable=True),
    sa.Column('discount_names', sa.String(), nullable=True),
    sa.Column('refunds', sa.Float(), nullable=True),
    sa.Column('position', sa.String(), nullable=True),
    sa.Column('registration_insurance', sa.Boolean(), server_default='0', nullable=True),
    sa.Column('player_submitted_notes', sa.String(), nullable=True),
    sa.Column('camp_instance_id', sa.Integer(), nullable=True),
    sa.Column('camp_group_instance_id', sa.Integer(), nullable=True),
    sa.Column('spng_survey_camp_id', sa.Integer(), nullable=True),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['camp_group_instance_id'], ['camp_group_instances.id'], ),
    sa.ForeignKeyConstraint(['camp_instance_id'], ['camp_instances.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['spng_survey_camp_id'], ['spng_survey_camps.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('spng_survey_result_id')
    )
    op.create_index(op.f('ix_camp_instance_registrations_id'), 'camp_instance_registrations', ['id'], unique=False)
    op.create_table('conference_instances',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('year_start', sa.Integer(), nullable=True),
    sa.Column('year_end', sa.Integer(), nullable=True),
    sa.Column('conference_id', sa.Integer(), nullable=True),
    sa.Column('league_instance_id', sa.Integer(), nullable=True),
    sa.Column('season_instance_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['conference_id'], ['conferences.id'], ),
    sa.ForeignKeyConstraint(['league_instance_id'], ['league_instances.id'], ),
    sa.ForeignKeyConstraint(['season_instance_id'], ['season_instances.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('divisions',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('season_id', sa.Integer(), nullable=True),
    sa.Column('league_id', sa.Integer(), nullable=True),
    sa.Column('conference_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['conference_id'], ['conferences.id'], ),
    sa.ForeignKeyConstraint(['league_id'], ['leagues.id'], ),
    sa.ForeignKeyConstraint(['season_id'], ['seasons.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_divisions_name'), 'divisions', ['name'], unique=False)
    op.create_table('program_instance_registrations',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('placed_at_datetime', main.utils.sqlalchemy.AwareDateTime(), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('coaches_comment', sa.Text(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('spng_survey_id', sa.Integer(), nullable=True),
    sa.Column('spng_survey_result_id', sa.Integer(), nullable=True),
    sa.Column('spng_persona_id', sa.Integer(), nullable=True),
    sa.Column('spng_user_id', sa.Integer(), nullable=True),
    sa.Column('roster_player_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('completed', sa.Boolean(), nullable=True),
    sa.Column('registration_sport', sa.String(), nullable=True),
    sa.Column('registration_type', sa.String(), nullable=True),
    sa.Column('registrant_type', sa.String(), nullable=True),
    sa.Column('extra_question_answers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('gross', sa.Float(), nullable=True),
    sa.Column('net', sa.Float(), nullable=True),
    sa.Column('service_fee', sa.Float(), nullable=True),
    sa.Column('gross_forecast', sa.Float(), nullable=True),
    sa.Column('net_forecast', sa.Float(), nullable=True),
    sa.Column('service_fee_forecast', sa.Float(), nullable=True),
    sa.Column('gross_outstanding', sa.Float(), nullable=True),
    sa.Column('order_number', sa.String(), nullable=True),
    sa.Column('discounts', sa.Float(), nullable=True),
    sa.Column('discount_names', sa.String(), nullable=True),
    sa.Column('refunds', sa.Float(), nullable=True),
    sa.Column('position', sa.String(), nullable=True),
    sa.Column('registration_insurance', sa.Boolean(), server_default='0', nullable=True),
    sa.Column('player_submitted_notes', sa.String(), nullable=True),
    sa.Column('program_instance_id', sa.Integer(), nullable=True),
    sa.Column('program_group_instance_id', sa.Integer(), nullable=True),
    sa.Column('spng_survey_program_id', sa.Integer(), nullable=True),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['program_group_instance_id'], ['program_group_instances.id'], ),
    sa.ForeignKeyConstraint(['program_instance_id'], ['program_instances.id'], ),
    sa.ForeignKeyConstraint(['spng_survey_program_id'], ['spng_survey_programs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('spng_survey_result_id')
    )
    op.create_index(op.f('ix_program_instance_registrations_id'), 'program_instance_registrations', ['id'], unique=False)
    op.create_table('division_instances',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('year_start', sa.Integer(), nullable=True),
    sa.Column('year_end', sa.Integer(), nullable=True),
    sa.Column('division_id', sa.Integer(), nullable=True),
    sa.Column('season_instance_id', sa.Integer(), nullable=True),
    sa.Column('league_instance_id', sa.Integer(), nullable=True),
    sa.Column('conference_instance_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['conference_instance_id'], ['conference_instances.id'], ),
    sa.ForeignKeyConstraint(['division_id'], ['divisions.id'], ),
    sa.ForeignKeyConstraint(['league_instance_id'], ['league_instances.id'], ),
    sa.ForeignKeyConstraint(['season_instance_id'], ['season_instances.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teams',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('province', sa.String(), nullable=True),
    sa.Column('gender', sa.String(length=25), nullable=True),
    sa.Column('division_id', sa.Integer(), nullable=True),
    sa.Column('conference_id', sa.Integer(), nullable=True),
    sa.Column('league_id', sa.Integer(), nullable=True),
    sa.Column('season_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['conference_id'], ['conferences.id'], ),
    sa.ForeignKeyConstraint(['division_id'], ['divisions.id'], ),
    sa.ForeignKeyConstraint(['league_id'], ['leagues.id'], ),
    sa.ForeignKeyConstraint(['season_id'], ['seasons.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_teams_city'), 'teams', ['city'], unique=False)
    op.create_index(op.f('ix_teams_gender'), 'teams', ['gender'], unique=False)
    op.create_index(op.f('ix_teams_name'), 'teams', ['name'], unique=False)
    op.create_index(op.f('ix_teams_province'), 'teams', ['province'], unique=False)
    op.create_table('team_instances',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=True),
    sa.Column('division_instance_id', sa.Integer(), nullable=True),
    sa.Column('conference_instance_id', sa.Integer(), nullable=True),
    sa.Column('league_instance_id', sa.Integer(), nullable=True),
    sa.Column('season_instance_id', sa.Integer(), nullable=True),
    sa.Column('year_start', sa.Integer(), nullable=True),
    sa.Column('year_end', sa.Integer(), nullable=True),
    sa.Column('birth_year', sa.Integer(), nullable=True),
    sa.Column('spng_name_snake', sa.String(), nullable=True),
    sa.Column('spng_shared_question_id', sa.Integer(), nullable=True),
    sa.Column('gs_team_id', sa.Integer(), nullable=True),
    sa.Column('number_of_tracksuits_available', sa.Integer(), nullable=True),
    sa.Column('jersey_numbers_options', sa.String(), nullable=True),
    sa.Column('has_jersey_size_option', sa.Boolean(), server_default='0', nullable=True),
    sa.Column('jersey_sizes_options', sa.String(), nullable=True),
    sa.Column('registrations_needs_jersey_default_value', sa.Boolean(), nullable=True),
    sa.Column('has_socks_size_option', sa.Boolean(), server_default='0', nullable=True),
    sa.Column('socks_sizes_options', sa.String(), nullable=True),
    sa.Column('registrations_needs_socks_default_value', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['conference_instance_id'], ['conference_instances.id'], ),
    sa.ForeignKeyConstraint(['division_instance_id'], ['division_instances.id'], ),
    sa.ForeignKeyConstraint(['league_instance_id'], ['league_instances.id'], ),
    sa.ForeignKeyConstraint(['season_instance_id'], ['season_instances.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_team_instances_id'), 'team_instances', ['id'], unique=False)
    op.create_index(op.f('ix_team_instances_spng_name_snake'), 'team_instances', ['spng_name_snake'], unique=False)
    op.create_index(op.f('ix_team_instances_spng_shared_question_id'), 'team_instances', ['spng_shared_question_id'], unique=False)
    op.create_table('team_instance_registrations',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('placed_at_datetime', main.utils.sqlalchemy.AwareDateTime(), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('coaches_comment', sa.Text(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('spng_survey_id', sa.Integer(), nullable=True),
    sa.Column('spng_survey_result_id', sa.Integer(), nullable=True),
    sa.Column('spng_persona_id', sa.Integer(), nullable=True),
    sa.Column('spng_user_id', sa.Integer(), nullable=True),
    sa.Column('roster_player_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('completed', sa.Boolean(), nullable=True),
    sa.Column('registration_sport', sa.String(), nullable=True),
    sa.Column('registration_type', sa.String(), nullable=True),
    sa.Column('registrant_type', sa.String(), nullable=True),
    sa.Column('extra_question_answers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('gross', sa.Float(), nullable=True),
    sa.Column('net', sa.Float(), nullable=True),
    sa.Column('service_fee', sa.Float(), nullable=True),
    sa.Column('gross_forecast', sa.Float(), nullable=True),
    sa.Column('net_forecast', sa.Float(), nullable=True),
    sa.Column('service_fee_forecast', sa.Float(), nullable=True),
    sa.Column('gross_outstanding', sa.Float(), nullable=True),
    sa.Column('order_number', sa.String(), nullable=True),
    sa.Column('discounts', sa.Float(), nullable=True),
    sa.Column('discount_names', sa.String(), nullable=True),
    sa.Column('refunds', sa.Float(), nullable=True),
    sa.Column('position', sa.String(), nullable=True),
    sa.Column('registration_insurance', sa.Boolean(), server_default='0', nullable=True),
    sa.Column('player_submitted_notes', sa.String(), nullable=True),
    sa.Column('team_instance_id', sa.Integer(), nullable=True),
    sa.Column('spng_survey_team_id', sa.Integer(), nullable=True),
    sa.Column('needs_jersey', sa.Boolean(), server_default='0', nullable=True),
    sa.Column('needs_socks', sa.Boolean(), server_default='0', nullable=True),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['spng_survey_team_id'], ['spng_survey_teams.id'], ),
    sa.ForeignKeyConstraint(['team_instance_id'], ['team_instances.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('spng_survey_result_id')
    )
    op.create_index(op.f('ix_team_instance_registrations_id'), 'team_instance_registrations', ['id'], unique=False)
    op.create_table('team_instance_tracksuit_orders',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_instance_id', sa.Integer(), nullable=True),
    sa.Column('jacket_size', sa.String(length=50), nullable=True),
    sa.Column('pants_size', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['team_instance_id'], ['team_instances.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team_instances_adult_reps',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('team_instance_id', sa.Integer(), nullable=False),
    sa.Column('adult_rep_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['adult_rep_id'], ['adult_reps.id'], ),
    sa.ForeignKeyConstraint(['team_instance_id'], ['team_instances.id'], ),
    sa.PrimaryKeyConstraint('team_instance_id', 'adult_rep_id')
    )
    op.create_table('team_instances_coaches',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('team_instance_id', sa.Integer(), nullable=False),
    sa.Column('coach_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['coach_id'], ['coaches.id'], ),
    sa.ForeignKeyConstraint(['team_instance_id'], ['team_instances.id'], ),
    sa.PrimaryKeyConstraint('team_instance_id', 'coach_id')
    )
    op.create_table('team_instances_players',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('team_instance_id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.Column('comment', sa.String(), nullable=True),
    sa.Column('position', sa.String(), nullable=True),
    sa.Column('sponsors', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['team_instance_id'], ['team_instances.id'], ),
    sa.PrimaryKeyConstraint('team_instance_id', 'player_id')
    )
    op.create_index(op.f('ix_team_instances_players_comment'), 'team_instances_players', ['comment'], unique=False)
    op.create_table('team_instance_jersey_socks_orders',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_instance_id', sa.Integer(), nullable=True),
    sa.Column('team_instance_registration_id', sa.Integer(), nullable=True),
    sa.Column('jersey_number', sa.Integer(), nullable=True),
    sa.Column('jersey_size', sa.String(), nullable=True),
    sa.Column('socks_size', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['team_instance_id'], ['team_instances.id'], ),
    sa.ForeignKeyConstraint(['team_instance_registration_id'], ['team_instance_registrations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team_instance_registration_jersey_sponsors',
    sa.Column('created_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('updated_on', main.utils.sqlalchemy.AwareDateTime(), server_default=sa.text("timezone('utc'::text, now())"), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_instance_registration_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['team_instance_registration_id'], ['team_instance_registrations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_team_instance_registration_jersey_sponsors_name'), 'team_instance_registration_jersey_sponsors', ['name'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_team_instance_registration_jersey_sponsors_name'), table_name='team_instance_registration_jersey_sponsors')
    op.drop_table('team_instance_registration_jersey_sponsors')
    op.drop_table('team_instance_jersey_socks_orders')
    op.drop_index(op.f('ix_team_instances_players_comment'), table_name='team_instances_players')
    op.drop_table('team_instances_players')
    op.drop_table('team_instances_coaches')
    op.drop_table('team_instances_adult_reps')
    op.drop_table('team_instance_tracksuit_orders')
    op.drop_index(op.f('ix_team_instance_registrations_id'), table_name='team_instance_registrations')
    op.drop_table('team_instance_registrations')
    op.drop_index(op.f('ix_team_instances_spng_shared_question_id'), table_name='team_instances')
    op.drop_index(op.f('ix_team_instances_spng_name_snake'), table_name='team_instances')
    op.drop_index(op.f('ix_team_instances_id'), table_name='team_instances')
    op.drop_table('team_instances')
    op.drop_index(op.f('ix_teams_province'), table_name='teams')
    op.drop_index(op.f('ix_teams_name'), table_name='teams')
    op.drop_index(op.f('ix_teams_gender'), table_name='teams')
    op.drop_index(op.f('ix_teams_city'), table_name='teams')
    op.drop_table('teams')
    op.drop_table('division_instances')
    op.drop_index(op.f('ix_program_instance_registrations_id'), table_name='program_instance_registrations')
    op.drop_table('program_instance_registrations')
    op.drop_index(op.f('ix_divisions_name'), table_name='divisions')
    op.drop_table('divisions')
    op.drop_table('conference_instances')
    op.drop_index(op.f('ix_camp_instance_registrations_id'), table_name='camp_instance_registrations')
    op.drop_table('camp_instance_registrations')
    op.drop_table('resource_videos')
    op.drop_table('resource_pdfs')
    op.drop_table('resource_articles')
    op.drop_table('program_instances_coaches')
    op.drop_table('program_group_instances')
    op.drop_table('league_instances')
    op.drop_table('guardians_players')
    op.drop_index(op.f('ix_form_entry_answer_textareas_id'), table_name='form_entry_answer_textareas')
    op.drop_table('form_entry_answer_textareas')
    op.drop_index(op.f('ix_form_entry_answer_selects_id'), table_name='form_entry_answer_selects')
    op.drop_table('form_entry_answer_selects')
    op.drop_index(op.f('ix_form_entry_answer_radios_id'), table_name='form_entry_answer_radios')
    op.drop_table('form_entry_answer_radios')
    op.drop_index(op.f('ix_form_entry_answer_inputs_id'), table_name='form_entry_answer_inputs')
    op.drop_table('form_entry_answer_inputs')
    op.drop_index(op.f('ix_form_entry_answer_checkboxes_id'), table_name='form_entry_answer_checkboxes')
    op.drop_table('form_entry_answer_checkboxes')
    op.drop_index(op.f('ix_conferences_name'), table_name='conferences')
    op.drop_table('conferences')
    op.drop_table('camp_instances_coaches')
    op.drop_table('camp_group_instances')
    op.drop_table('spng_surveys_spng_survey_questions')
    op.drop_table('spng_survey_teams')
    op.drop_index(op.f('ix_spng_survey_question_table_maps_id'), table_name='spng_survey_question_table_maps')
    op.drop_index(op.f('ix_spng_survey_question_table_maps_db_table_name'), table_name='spng_survey_question_table_maps')
    op.drop_index(op.f('ix_spng_survey_question_table_maps_db_table_column_name'), table_name='spng_survey_question_table_maps')
    op.drop_table('spng_survey_question_table_maps')
    op.drop_table('spng_survey_programs')
    op.drop_table('spng_survey_camps')
    op.drop_table('season_instances')
    op.drop_index(op.f('ix_resources_id'), table_name='resources')
    op.drop_table('resources')
    op.drop_index(op.f('ix_program_instances_spng_shared_question_id'), table_name='program_instances')
    op.drop_index(op.f('ix_program_instances_spng_name_snake'), table_name='program_instances')
    op.drop_table('program_instances')
    op.drop_table('program_groups')
    op.drop_index(op.f('ix_leagues_name'), table_name='leagues')
    op.drop_index(op.f('ix_leagues_id'), table_name='leagues')
    op.drop_table('leagues')
    op.drop_index(op.f('ix_guardians_full_name'), table_name='guardians')
    op.drop_table('guardians')
    op.drop_index(op.f('ix_form_question_textareas_id'), table_name='form_question_textareas')
    op.drop_table('form_question_textareas')
    op.drop_index(op.f('ix_form_question_selects_id'), table_name='form_question_selects')
    op.drop_table('form_question_selects')
    op.drop_index(op.f('ix_form_question_radios_id'), table_name='form_question_radios')
    op.drop_table('form_question_radios')
    op.drop_index(op.f('ix_form_question_inputs_id'), table_name='form_question_inputs')
    op.drop_table('form_question_inputs')
    op.drop_index(op.f('ix_form_question_checkboxes_id'), table_name='form_question_checkboxes')
    op.drop_table('form_question_checkboxes')
    op.drop_index(op.f('ix_form_entries_slug'), table_name='form_entries')
    op.drop_index(op.f('ix_form_entries_id'), table_name='form_entries')
    op.drop_table('form_entries')
    op.drop_index(op.f('ix_coaches_full_name'), table_name='coaches')
    op.drop_table('coaches')
    op.drop_index(op.f('ix_camp_instances_spng_shared_question_id'), table_name='camp_instances')
    op.drop_index(op.f('ix_camp_instances_spng_name_snake'), table_name='camp_instances')
    op.drop_table('camp_instances')
    op.drop_table('camp_groups')
    op.drop_index(op.f('ix_adult_reps_full_name'), table_name='adult_reps')
    op.drop_table('adult_reps')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_name'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_spng_surveys_survey_id'), table_name='spng_surveys')
    op.drop_index(op.f('ix_spng_surveys_name'), table_name='spng_surveys')
    op.drop_index(op.f('ix_spng_surveys_id'), table_name='spng_surveys')
    op.drop_table('spng_surveys')
    op.drop_index(op.f('ix_spng_survey_questions_id'), table_name='spng_survey_questions')
    op.drop_table('spng_survey_questions')
    op.drop_index(op.f('ix_spng_meta_id'), table_name='spng_meta')
    op.drop_table('spng_meta')
    op.drop_index(op.f('ix_seasons_name'), table_name='seasons')
    op.drop_index(op.f('ix_seasons_id'), table_name='seasons')
    op.drop_table('seasons')
    op.drop_table('resource_categories')
    op.drop_table('programs')
    op.drop_index(op.f('ix_players_last_name'), table_name='players')
    op.drop_index(op.f('ix_players_first_name'), table_name='players')
    op.drop_index(op.f('ix_players_date_of_birth'), table_name='players')
    op.drop_table('players')
    op.drop_index(op.f('ix_gs_meta_id'), table_name='gs_meta')
    op.drop_table('gs_meta')
    op.drop_index(op.f('ix_forms_title'), table_name='forms')
    op.drop_index(op.f('ix_forms_slug'), table_name='forms')
    op.drop_index(op.f('ix_forms_id'), table_name='forms')
    op.drop_table('forms')
    op.drop_table('camps')
    # ### end Alembic commands ###
